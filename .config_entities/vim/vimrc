set nocompatible
filetype off

" XDG Directory Specification
if $XDG_CACHE_HOME == ''
   let $XDG_CACHE_HOME = expand('$HOME/.cache')
endif
if $XDG_CONFIG_HOME == ''
   let $XDG_CONFIG_HOME = expand('$HOME/.config')
endif
if $XDG_DATA_HOME == ''
   let $XDG_DATA_HOME = expand('$HOME/.local/share')
endif

let g:undodir = expand("$XDG_CACHE_HOME/vim/undo")
let &undodir=g:undodir
if !isdirectory(g:undodir)
   call mkdir(g:undodir, "p")
endif

let g:directory = expand("$XDG_CACHE_HOME/vim/swap")
let &directory=g:directory
if !isdirectory(g:directory)
   call mkdir(g:directory, "p")
endif

let g:backupdir = expand("$XDG_CACHE_HOME/vim/backup")
let &backupdir=g:backupdir
if !isdirectory(g:backupdir)
   call mkdir(g:backupdir, "p")
endif

set viminfo+='1000,n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set packpath+=$XDG_DATA_HOME/vim,$XDG_DATA_HOME/vim/after

" Basic
set history=200
set backspace=indent,start,eol
set whichwrap=b,s,h,l,<,>,[,]
set clipboard+=unnamed,unnamedplus
set wildmode=list,full

" Indentation
set autoindent
set expandtab
set tabstop=3
set shiftwidth=3
set softtabstop=3

" Visual
set cino+=(0
set noerrorbells
set visualbell t_vb=
set number
set cursorline
set nostartofline
set fileencoding=utf-8
set fileencodings=utf-8,euc-jp
set ambiwidth=double
set showmatch
set matchpairs& matchpairs+=<:>
   autocmd FileType c,cpp,java set matchpairs+==:;
set wrap
set breakindent
set list
set listchars=tab:>-,extends:>,precedes:<,trail:_,nbsp:%
set incsearch
set hlsearch
set conceallevel=0

" Statusline
set laststatus=2
set statusline=%F
set statusline+=%m
set statusline+=%r
set statusline+=%h
set statusline+=%w
set statusline+=%=
set statusline+=%y
set statusline+=[%{&fileencoding}]
set statusline+=[%l/%L,%c/%{strlen(getline('.'))}]

"------------------------------------------------------------------------------
" Color

let OSTYPE = system('uname')
if match(OSTYPE, 'Linux') != -1
   set t_Co=256
endif

let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

try
   source $XDG_CONFIG_HOME/vim/local/colormode.vim
catch
endtry
if exists('g:colormode') && g:colormode == "light"
   set background=light
   syntax on
   colorscheme default
else
   set background=dark
   syntax on
   colorscheme koehler
endif

" 80文字制限ラインを可視化
if (exists('+colorcolumn'))
   set colorcolumn=80,100,120
endif

"------------------------------------------------------------------------------
" Color scheme development

" カーソル上のhighlight情報を取得
" :SyntaxInfo
function! s:get_syn_id(transparent)
   let synid = synID(line("."), col("."), 1)
   if a:transparent
      return synIDtrans(synid)
   else
      return synid
   endif
endfunction

function! s:get_syn_attr(synid)
   let name = synIDattr(a:synid, "name")
   let ctermfg = synIDattr(a:synid, "fg", "cterm")
   let ctermbg = synIDattr(a:synid, "bg", "cterm")
   let cterm = synIDattr(a:synid, "cterm")
   let term = synIDattr(a:synid, "term")
   let guifg = synIDattr(a:synid, "fg", "gui")
   let guibg = synIDattr(a:synid, "bg", "gui")
   let gui = synIDattr(a:synid, "gui")
   return {
      \ "name": name,
      \ "ctermfg": ctermfg,
      \ "ctermbg": ctermbg,
      \ "cterm": cterm,
      \ "term": term,
      \ "guifg": guifg,
      \ "guibg": guibg,
      \ "gui": gui
   \}
endfunction

function! s:get_syn_info()
   let baseSyn = s:get_syn_attr(s:get_syn_id(0))
   echo "name: " . baseSyn.name .
      \ " ctermfg: " . baseSyn.ctermfg .
      \ " ctermbg: " . baseSyn.ctermbg .
      \ " cterm: " . baseSyn.cterm .
      \ " term: " . baseSyn.term .
      \ " guifg: " . baseSyn.guifg .
      \ " guibg: " . baseSyn.guibg
      \ " gui: " . baseSyn.gui
   let linkedSyn = s:get_syn_attr(s:get_syn_id(1))
   echo "link to"
   echo "name: " . linkedSyn.name .
      \ " ctermfg: " . linkedSyn.ctermfg .
      \ " ctermbg: " . linkedSyn.ctermbg .
      \ " cterm: " . linkedSyn.cterm .
      \ " term: " . linkedSyn.term .
      \ " guifg: " . linkedSyn.guifg .
      \ " guibg: " . linkedSyn.guibg
      \ " gui: " . linkedSyn.gui
endfunction
command! SyntaxInfo call s:get_syn_info()

function! s:auto_update_colorscheme(...) abort
   if &ft !=# 'vim'
      echoerr 'Execute this command in colorscheme file buffer'
   endif
   setlocal autoread noswapfile
   let interval = a:0 > 0 ? a:1 : 3000
   let timer = timer_start(interval, {-> execute('checktime')}, {'repeat' : -1})
   autocmd! BufReadPost <buffer> source %
endfunction
command! -nargs=? AutoUpdateColorscheme call <SID>auto_update_colorscheme(<f-args>)

"------------------------------------------------------------------------------
" Keybind

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

nnoremap <C-c> <C-c>:<C-u>syntax sync fromstart<CR>
nnoremap <C-l> <C-l>:<C-u>nohlsearch<CR>

inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<CR>"
imap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

filetype indent plugin on

"------------------------------------------------------------------------------
" Local config

augroup vimrc-local
   autocmd!
   autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

function! s:vimrc_local(loc)
   let files = findfile('.vimrc.local', escape(a:loc, ' ') . ';', -1)
   for i in reverse(filter(files, 'filereadable(v:val)'))
      source `=i`
   endfor
endfunction
